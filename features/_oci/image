#!/usr/bin/env bash

set -Eeuxo pipefail

echo "creating OCI compliant file.."

export PATH="/builder/image.d:$PATH"
export PATH="/builder:$PATH"

image $1 $2

input="$1"
output="$2"
targetBaseDir=$(dirname "$output")

chroot_dir="$(mktemp -d)"
mount -t tmpfs tmpfs "$chroot_dir"
tar --extract --xattrs --xattrs-include '*' --directory "$chroot_dir" < "$input"

# extract kernel image, cmdline and initramfs
cp "$chroot_dir/boot/"vmlinuz* "$output.vmlinuz"
cp "$chroot_dir/boot/"initrd* "$output.initrd"
read -r _ cmdline < "$chroot_dir/etc/kernel/cmdline"

# get the actual root fs
# if it's the empty default (#) we need to rewrite that
root_source=$(tail -n 1 "$chroot_dir/etc/fstab" | cut -d " " -f 1)
if [ $root_source = "#" ]; then
  root_source="LABEL=ROOT"
fi

cmdline="root=$root_source $cmdline"

umount "$chroot_dir"
rmdir "$chroot_dir"

# onmetal
# neccessary binary has been placed into the build container
imageid=$(onmetal-image build --rootfs-file $output --kernel-file "$output.vmlinuz" --initramfs-file "$output.initrd" --command-line "$cmdline" --store-path "$targetBaseDir/onmetal" | tail -n1 | cut -d" " -f3)
onmetal-image list --store-path "$targetBaseDir/onmetal"
echo "sha256:$imageid" > "$output.oci"
